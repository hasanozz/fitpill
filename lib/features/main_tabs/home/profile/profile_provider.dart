// profile_provider.dart

import 'dart:io';

import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:fitpill/features/main_tabs/home/profile/user_profile_model.dart';
import 'package:fitpill/features/auth/auth_provider.dart';
import 'package:fitpill/features/profile/user/user_repository.dart';
// Yeni import: Generator iÃ§in zorunlu
import 'package:riverpod_annotation/riverpod_annotation.dart';

import 'package:fitpill/features/profile/user/user_providers.dart';
import 'profile_image_repository.dart';
import 'package:fitpill/features/auth/auth_notifier.dart';
// Generator'Ä±n Ã¼reteceÄŸi dosyayÄ± iÅŸaret ediyoruz
part 'profile_provider.g.dart';




// ----------------------------------------------------------------------
// PROVIDER TANIMLARI (GENERATOR)
// ----------------------------------------------------------------------

/// ğŸ”¹ ProfileImageRepository Provider (Statik Provider)
// ArtÄ±k manuel Provider yerine Generator'Ä±n Ã¼rettiÄŸi bir fonksiyon provider'Ä± kullanÄ±yoruz.
@Riverpod(keepAlive: true) // keepAlive, Auth durumu deÄŸiÅŸse bile Repository'nin ayakta kalmasÄ±nÄ± saÄŸlar.
ProfileImageRepository profileImageRepository(Ref ref) {
  return ProfileImageRepository(storage: FirebaseStorage.instance);
}


/// ğŸ”¹ Premium Status Provider (Computed Provider)
// Bu, Generator ile oluÅŸturulan AsyncNotifier'Ä±n state'ini dinleyecektir.
@Riverpod(keepAlive: true)
AsyncValue<bool> premiumStatus(Ref ref) {
  // profileProvider (Generator tarafÄ±ndan Ã¼retilen isim) izlenir.
  final profileState = ref.watch(profileProvider);
  return profileState.whenData((profile) => profile.hasActivePremium);
}


// ----------------------------------------------------------------------
// NOTIFIER SINIFI (AsyncNotifier)
// ----------------------------------------------------------------------

/// ğŸ”¹ Profile Notifier (AsyncNotifier - GENERATOR)
// AsyncNotifier, AsyncValue<UserProfileModel> tÃ¼rÃ¼nÃ¼ yÃ¶netmek iÃ§in en uygunudur.
// _$Profile, Generator tarafÄ±ndan Ã¼retilen temel sÄ±nÄ±ftÄ±r.
@Riverpod(keepAlive: true) // Oturum aÃ§Ä±p kapanmalarda state'in korunmasÄ± iÃ§in.
class Profile extends _$Profile {

  // SÄ±nÄ±f alanlarÄ±nÄ± build iÃ§inde Ã§Ã¶zebiliriz.


  @override
  Future<UserProfileModel> build() async {
    // 1. BaÄŸÄ±mlÄ±lÄ±klarÄ± Ã§Ã¶zme
    // Generator, userRepositoryProvider'Ä± Ã¼rettiÄŸi iÃ§in direkt kullanÄ±rÄ±z.

    // 2. Auth durumu deÄŸiÅŸimini izleme
    // ref.listen() manuel kullanÄ±mÄ±na gerek kalmadÄ±!
    // ref.watch(authProvider) ile bir deÄŸiÅŸiklik olduÄŸunda build() metodu yeniden Ã§alÄ±ÅŸÄ±r.
    final uid = ref.watch(userIdProvider);

    if (uid == null) {
      // KullanÄ±cÄ± Ã§Ä±kÄ±ÅŸ yaptÄ±ysa veya oturum aÃ§madÄ±ysa
      // AsyncNotifier'Ä±n baÅŸlangÄ±Ã§ state'i olan AsyncLoading'i dÃ¶ndÃ¼rmez.
      // throw (veya `return Future.error`) AsyncError'a neden olur.
      // Bu, UI'da Loading yerine 'Not Authenticated' gibi bir hata gÃ¶stermemizi saÄŸlar.
      // NOTE: Orijinal kodda AsyncValue.loading() dÃ¶ndÃ¼rÃ¼ldÃ¼ÄŸÃ¼nden, burada da buna yakÄ±n bir davranÄ±ÅŸ sergilenmeli.
      // Generator kullanÄ±rken, oturum yoksa biz de yÃ¼kleme yapmayÄ±z.
      // Ä°lk yÃ¼kleme baÅŸarÄ±lÄ±ysa ve sonra Ã§Ä±kÄ±ÅŸ yapÄ±ldÄ±ysa state `AsyncError` olur.

      // KullanÄ±cÄ±nÄ±n oturum aÃ§masÄ±nÄ± beklemek iÃ§in boÅŸ bir Future dÃ¶ndÃ¼rebiliriz
      // ya da bir hata fÄ±rlatÄ±p UI'Ä±n boÅŸ kalmasÄ±nÄ± saÄŸlayabiliriz.
      return Future.error('User not authenticated, profile not loaded.', StackTrace.current);
    }
    final userRepository = ref.watch(userRepositoryProvider);

    // 3. Veriyi yÃ¼kleme
    return _loadProfile(uid, userRepository);
  }

  /// -------------------------------------------
  /// MANTIK METOTLARI
  /// -------------------------------------------

  Future<UserProfileModel> _loadProfile(String userId, UserRepository repository) async {
    // Notifier'da state = AsyncValue.loading() yapmaya gerek yoktur.
    // build() metodu yeniden Ã§alÄ±ÅŸtÄ±ÄŸÄ±nda bu zaten AsyncLoading state'ine geÃ§er.
    // Ancak dÄ±ÅŸarÄ±dan Ã§aÄŸrÄ±lan fetchProfile metodu iÃ§in manuel loading atÄ±labilir.

    final profileData = await repository.getUserProfile(userId);
    if (profileData != null) {
      return UserProfileModel.fromMap(profileData, id: userId);
    } else {
      throw Exception('Profil bulunamadÄ±');
    }
  }

  /// Orijinaldeki gibi, dÄ±ÅŸarÄ±dan manuel Ã§aÄŸÄ±rmak iÃ§in.
  Future<void> fetchProfile() async {
    final uid = ref.read(userIdProvider);
    if (uid == null) {
      state = AsyncValue.error('User is not authenticated', StackTrace.current);
      return;
    }
    // _loadProfile'Ä± doÄŸrudan Ã§aÄŸÄ±rÄ±p state'i gÃ¼ncellemek yerine
    // AsyncNotifier'Ä±n state'ini yeniden hesaplamasÄ±nÄ± isteriz.
    final userRepository = ref.read(userRepositoryProvider);
    state = await AsyncValue.guard(() => _loadProfile(uid, userRepository));
  }

  Future<void> updateProfile(UserProfileModel updatedProfile) async {
    final uid = ref.read(userIdProvider);
    if (uid == null) throw Exception('User is not authenticated');
    final userRepository = ref.read(userRepositoryProvider);
    // AsyncNotifier'da state'i manuel olarak gÃ¼ncellemek iÃ§in update metodu kullanÄ±lÄ±r.
    await update((currentProfile) async {
      await userRepository.updateUserProfile(uid, updatedProfile.toMap());
      return updatedProfile; // Yeni state'i dÃ¶ndÃ¼r
    });
  }

  Future<void> uploadProfileImage(File imageFile) async {
    final uid = ref.read(userIdProvider);
    if (uid == null) throw Exception('User is not authenticated');

    final currentProfile = state.value;
    if (currentProfile == null) throw Exception('Profile is not loaded');

    final repository = ref.read(profileImageRepositoryProvider);
    final userRepository = ref.read(userRepositoryProvider);

    await update((currentProfile) async {
      final previousPath =
      repository.resolveStoragePath(currentProfile.profileImage);

      final downloadUrl = await repository.uploadProfileImage(
        userId: uid,
        file: imageFile,
        previousUrl: currentProfile.profileImage,
      );
      final newPath = repository.resolveStoragePath(downloadUrl);

      final updatedProfile = currentProfile.copyWith(
        profileImage: downloadUrl,
        avatar: null,
      );

      await userRepository.updateUserProfile(
        uid,
        updatedProfile.toMap(),
      );

      // Eski gÃ¶rseli silme mantÄ±ÄŸÄ±
      if (previousPath != null && previousPath != newPath) {
        await repository.deleteProfileImage(currentProfile.profileImage);
      }

      return updatedProfile;
    });
  }

  Future<void> removeProfileImage() async {
    final uid = ref.read(userIdProvider);
    if (uid == null) throw Exception('User is not authenticated');

    final userRepository = ref.read(userRepositoryProvider);

    await update((currentProfile) async {
      final repository = ref.read(profileImageRepositoryProvider);
      await repository.deleteProfileImage(currentProfile.profileImage);

      final updatedProfile = currentProfile.copyWith(
        profileImage: null,
      );

      await userRepository.updateUserProfile(
        uid,
        updatedProfile.toMap(),
      );
      return updatedProfile;
    });
  }

  Future<void> selectAvatar(String avatarName) async {
    final uid = ref.read(userIdProvider);
    if (uid == null) throw Exception('User is not authenticated');

    final userRepository = ref.read(userRepositoryProvider);

    await update((currentProfile) async {
      final repository = ref.read(profileImageRepositoryProvider);
      // Profil resmi varsa sil
      if (currentProfile.profileImage != null) {
        await repository.deleteProfileImage(currentProfile.profileImage);
      }

      final updatedProfile = currentProfile.copyWith(
        avatar: avatarName,
        profileImage: null,
      );

      await userRepository.updateUserProfile(
        uid,
        updatedProfile.toMap(),
      );
      return updatedProfile;
    });
  }
}